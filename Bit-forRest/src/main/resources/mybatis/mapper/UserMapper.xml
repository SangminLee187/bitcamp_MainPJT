<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mvc.forrest.dao.user.UserDAO">
 	
	<resultMap id="userSelectMap" type="user">
		<result property="userId"			column="userId"			jdbcType="VARCHAR"/>
		<result property="password"			column="password"		jdbcType="VARCHAR"/>
		<result property="nickname"			column="nickname"		jdbcType="VARCHAR"/>
		<result property="userName"			column="userName"		jdbcType="VARCHAR"/>
		<result property="userAddr"			column="userAddr"		jdbcType="VARCHAR"/>
		<result property="phone"			column="phone"			jdbcType="VARCHAR"/>
		<result property="role"				column="role"			jdbcType="VARCHAR"/>
		<result property="joinDate"			column="joinDate"		jdbcType="TIMESTAMP"/>
		<result property="joinPath"			column="joinPath"		jdbcType="VARCHAR"/>
		<result property="userImg"			column="userImg"		jdbcType="VARCHAR"/>
		<result property="recentDate"		column="recentDate"		jdbcType="TIMESTAMP"/>
		<result property="pushToken"		column="pushToken"		jdbcType="VARCHAR"/>
		<result	property="leaveApplyDate"	column="leaveApplyDate"	jdbcType="TIMESTAMP"/>
		<result	property="leaveDate"		column="leaveDate"		jdbcType="TIMESTAMP"/>
		<result	property="profit"			column="profit"			jdbcType="NUMERIC"/>
		<result	property="reportedCount"	column="reportedCount"	jdbcType="NUMERIC"/>
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addUser"		parameterType="User" >
		INSERT 
	 	INTO user(userId, password, nickname, userName, userAddr, phone, joinPath, joinDate, userImg)
	 	VALUES (#{userId}, #{password}, #{nickname}, #{userName}, #{userAddr}, #{phone}, #{joinPath}, CURRENT_TIMESTAMP(), #{userImg})
	 </insert>	 
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUser"	parameterType="String"	resultMap="userSelectMap">
		SELECT
		user.* , COALESCE(B.COUNT,0) AS 'reportedCount', COALESCE(C.COUNT,0) AS 'reviewedCount', D.profit, couponCount ,(G.sum+400)/(G.count+100) AS 'userRate'
		FROM user
		LEFT OUTER JOIN         
		(SELECT COUNT(*) COUNT, reportedUser FROM report Group by reportedUser) B 
		ON user.userId = B.reportedUser
		LEFT OUTER join
		(SELECT COUNT(*) COUNT, reviewedUserId FROM oldreview Group by reviewedUserId) C 
		ON user.userId = C.reviewedUserId
		LEFT OUTER JOIN
		(SELECT transaction.tranNo, product.prodName , transaction.userId, transaction.resultPrice, SUM(transaction.resultPrice)*0.3 profit, A.userId abc
		FROM transaction LEFT OUTER JOIN (SELECT * FROM transaction WHERE tranCode=0) A ON transaction.prodNo = A.prodNo
		LEFT OUTER JOIN product ON product.prodNo = transaction.prodNo
		where transaction.tranCode='1'
		GROUP BY A.userID) D
		ON user.userId = D.abc
		LEFT OUTER JOIN         
		(SELECT COUNT(*) AS 'couponCount', userId FROM owncoupon GROUP BY userId) E
		ON user.userId = E.userId
		LEFT OUTER JOIN
		(SELECT reportedUser, COUNT(*) reportedCount FROM report Group by reportedUser) F
		ON user.userId = F.reportedUser
		LEFT OUTER JOIN
		(		SELECT COUNT(userRate)count, SUM(userRate)sum , reviewedUserId
				FROM oldreview
				GROUP BY reviewedUserId) G
		ON user.userId = G.reviewedUserId
		WHERE user.userId = #{value}
	 </select>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUserByNickname"	parameterType="String"	resultMap="userSelectMap">
		SELECT *
		FROM user
		WHERE nickname = #{value}
	 </select>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUserByName"	parameterType="String"	resultMap="userSelectMap">
		SELECT *
		FROM user
		WHERE userName = #{value}
	 </select>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUserByPhone"	parameterType="String"	resultMap="userSelectMap">
		SELECT *
		FROM user
		WHERE phone = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updatePassword"	parameterType="User" >
	   	UPDATE user
	   	<set>
	   		password = #{password}
	   	</set>
	   	WHERE userId = #{userId}
	 </update>

	<!-- SQL : UPDATE --> 
 	<update	id="updateUser"	parameterType="User" >
	   	UPDATE user
	   	<set>
	   		nickname	= #{nickname},
	   		phone		= #{phone},
	   		userAddr	= #{userAddr},
	   		<if test="userImg != null">
	   		userImg		= #{userImg}
	   		</if>
	   	</set>
	   	WHERE userId = #{userId}
	 </update>
	 
	 	<!-- SQL : UPDATE --> 
 	<update	id="updateUserImg"	parameterType="User" >
	   	UPDATE user
	   	<set>
	   		userImg	= #{userImg}
	   	</set>
	   	WHERE userId = #{userId}
	 </update>
		 
	 <!-- SQL : UPDATE -->
	 <update	id="leaveUser"	parameterType="User" >
	   	UPDATE user
	   	<set>
	   		role	= 'leave'
	   	</set>
	   	WHERE userId = #{userId}
	 </update>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="applyLeave"	parameterType="User" >
	   	UPDATE user
	   	<set>
	   		leaveApplyDate	= CURRENT_TIMESTAMP(),
	   		leaveDate = DATE_ADD(CURRENT_TIMESTAMP(),INTERVAL +30 day)
	   	</set>
	   	WHERE userId = #{userId}
	 </update>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="restrictUser"	parameterType="User" >
	   	UPDATE user
	   	<set>
	   		role	= 'restrict'
	   	</set>
	   	WHERE userId = #{userId}
	 </update>
		 
	<!-- SQL : SELECT LIST	// blah = 아무의미없는 글자 // 신고횟수 조회때문에 나중에 조인해야함 -->
	
	<select  id="getUserList"  parameterType="Search"	resultMap="userSelectMap">				
	SELECT
		user.* , COALESCE(B.COUNT,0) AS 'reportedCount'
		FROM user LEFT OUTER JOIN 	  	
		(SELECT COUNT(*) COUNT, reportedUser FROM report Group by reportedUser) B 
		ON user.userId = B.reportedUser;																	
	</select>
	
	<!-- SQL : SELECT ROW Count -->
	 <select  id="getTotalCount"   resultType="int">
	  	SELECT COUNT(*)						
	  	FROM user	
	 </select>
	 
	 <!-- SQL : UPDATE recentDate -->
	 <update id="updateRecentDate" parameterType="User">
	 	UPDATE user
	 	<set>
	 		recentDate = CURRENT_TIMESTAMP()
	 	</set>
	 	WHERE userId = #{userId}
	 </update>
</mapper>