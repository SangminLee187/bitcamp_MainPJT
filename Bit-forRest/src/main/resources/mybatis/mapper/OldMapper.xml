<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mvc.forrest.dao.old.OldDAO">
	<!--namespace: 이 mapper.xml과 매핑될 mapper.java(인터페이스)를 의미함 -->

	<resultMap id="oldSelectMap" type="old">
		<!-- result property="필드" column="테이블" -->
		<result property="oldNo" column="oldNo" jdbcType="VARCHAR" />
		<result property="userId" column="userId" jdbcType="VARCHAR" />
		<result property="oldPrice" column="oldPrice" jdbcType="INTEGER" />
		<result property="oldTitle" column="oldTitle" jdbcType="VARCHAR" />
		<result property="oldDetail" column="oldDetail" jdbcType="INTEGER" />
		<result property="oldDate" column="oldDate" jdbcType="TIMESTAMP" />
		<result property="oldView" column="oldView" jdbcType="INTEGER" />
		<result property="category" column="category" jdbcType="VARCHAR" />
		<result property="oldState" column="oldState" jdbcType="TINYINT" />
		<result property="oldImg" column="oldImg" jdbcType="VARCHAR" />
		<result property="oldAddr" column="oldAddr" jdbcType="VARCHAR" />
		<result property="oldLikeNo" column="oldLikeNo" jdbcType="INTEGER" />
	</resultMap>

	<!-- SQL : INSERT -->
	<insert id="addOld" parameterType="old">
		INSERT
		INTO OLD(oldNo,userId,
		oldPrice, oldTitle, oldDetail, oldDate,oldView,
		category, oldState,
		oldImg, oldAddr)
		values
		(#{oldNo},#{userId},#{oldPrice},#{oldTitle},#{oldDetail},CURRENT_TIMESTAMP,#{oldView},#{category},#{oldState},#{oldImg},#{oldAddr})
	</insert>

	<!-- SQL : DELETE -->
	<delete id="deleteOld" parameterType="String">
		DELETE
		FROM OLD
		WHERE oldNo =
		#{oldNo}
	</delete>


	
	<select id="getOld" parameterType="String"
		resultMap="oldSelectMap">
		SELECT *
		FROM old
		LEFT OUTER JOIN
		oldReview
		ON old.oldNo= oldReview.oldNo
		WHERE old.oldNo=#{oldNo}
	</select>
	
	
	 <select id="getOldLogIn" parameterType="map"
      resultMap="oldSelectMap">
   SELECT old.* , A.oldLikeNo
   FROM old
   LEFT OUTER JOIN (SELECT * FROM oldlike WHERE userId=#{loginuserId}) A ON old.oldNo = A.oldNo
   where old.oldNo = #{oldNo}
   </select>
	
				
	<!-- SQL : UPDATE -->
	<update id="updateOld" parameterType="old">
		update old
		<set>
			oldPrice = #{oldPrice},
			oldTitle = #{oldTitle},
			oldDetail =
			#{oldDetail},
			category = #{category},
			oldState = #{oldState},
			oldImg
			=#{oldImg},
			oldAddr =#{oldAddr},
			oldDate =CURRENT_TIMESTAMP
		</set>
		WHERE oldNo = #{oldNo}
	</update>

	<!-- SQL : SELECT LIST -->
	<select id="getOldList" parameterType="Search" resultMap="oldSelectMap">
		SELECT * FROM old
		<where>
			<if test="searchKeyword != null and searchCategory == null">
				oldTitle LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
			<if test="searchKeyword == null and searchCategory !=null">
				category LIKE #{searchCategory}
			</if>
		</where>
		order by oldDate DESC
	</select>

	<!-- SQL : SELECT LIST -->
	<select id="getOldListHasUser" parameterType="map" resultMap="oldSelectMap">
		SELECT *
		FROM old LEFT OUTER JOIN (SELECT * FROM oldlike WHERE
		userId=#{userId}) A
		ON old.oldNo = A.oldNo
		<where>
		<if test="search.searchKeyword != null and search.searchCategory != null">
					old.oldTitle LIKE CONCAT('%',#{search.searchKeyword},'%') and category LIKE #{search.searchCategory}
	     	</if>
			<if test="search.searchKeyword != null and search.searchCategory == null">
				old.oldTitle LIKE CONCAT('%',#{search.searchKeyword},'%')
			</if>
			<if test="search.searchKeyword ==null and search.searchCategory !=null">
				old.category LIKE CONCAT('%',#{search.searchCategory},'%')
			</if>
		</where>
		order by old.oldDate DESC
	</select>

	<select id="getOldListForIndex" resultMap="oldSelectMap">
		SELECT inner_table.* ,
		inner_table.ROWNO
		FROM(
		SELECT *, ROW_NUMBER() OVER() AS ROWNO
		FROM old
		order by oldDate DESC ) inner_table
		WHERE inner_table.ROWNO &lt;= 4
	</select>
	
	<select id="getOldListCategory" parameterType="old" resultMap="oldSelectMap">
	SELECT inner_table.* ,
		inner_table.ROWNO
		FROM(
		SELECT *, ROW_NUMBER() OVER() AS ROWNO
		FROM old
		WHERE category= #{category}
		order by oldDate DESC ) inner_table
		WHERE inner_table.ROWNO &lt;= 4
		and oldNo != #{oldNo}
	</select>
	
	<select id="getOldListOthers" parameterType="old" resultMap="oldSelectMap">
	SELECT inner_table.* ,
		inner_table.ROWNO
		FROM(
		SELECT *, ROW_NUMBER() OVER() AS ROWNO
		FROM old
		WHERE userId= #{userId}
		order by oldDate DESC ) inner_table
		WHERE inner_table.ROWNO &lt;= 4
	</select>
	
	<select id="getOldListForUser" parameterType="String" resultMap="oldSelectMap">
	SELECT inner_table.* 
	FROM(
		SELECT *, ROW_NUMBER() OVER(order by oldDate DESC) AS ROWNO
		FROM old
		WHERE userId= #{value}
		order by oldDate DESC ) inner_table
	</select>
	
	
	<update id="updateOldDate" parameterType= "String">
		update old
		<set>
			oldDate = CURRENT_TIMESTAMP
		</set>
		WHERE oldNo = #{oldNo}
	</update>
	
	
	 <update id="updateViewCnt" parameterType= "String">
     	update old
		<set>
		oldView = oldView+1
		</set>
        WHERE oldNo = #{oldNo}
 	</update>
 	
 	
 	<update id="updateOldSold" parameterType="String">
	update old
	<set>
	oldState = 0
	</set>
	WHERE oldNo =#{oldNo}	
	</update>
	
	<update id="updateOldOnSale" parameterType="String">
	update old
	<set>
	oldState = 1
	</set>
	WHERE oldNo =#{oldNo}	
	</update>
	
</mapper>