<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  <mapper namespace="ProductMapper"> 가 @Mapper 와 함께 밑의 한줄로 대체 됨-->
<mapper namespace="com.mvc.forrest.dao.ProductDAO"> 	
 	
	<resultMap id="productSelectMap" type="product">
		<result property="prodNo" 				column="prodNo" 				jdbcType="INTEGER"/>
		<result property="width"	   			column="width" 				jdbcType="INTEGER" />
		<result property="length" 			column="LENGTH " 			jdbcType="INTEGER" />
		<result property="height" 			column="height" 		jdbcType="INTEGER" />
		<result property="userId" 				column="userId" 					jdbcType="VARCHAR" />
		<result property="prodCondition" 			column="prodCondition" 			jdbcType="INTEGER" />
		<result property="prodQuantity" 				column="prodQuantity" 				jdbcType="INTEGER" />
		<result property="prodName" 			column="prodName" 				jdbcType="VARCHAR"  />
		<result property="prodDetail" 				column="prodDetail" 				jdbcType="VARCHAR"  />
		<result property="isRental" 				column="isRental" 				jdbcType="TINYINT"  />
		<result property="rentalCounting" 				column="rentalCounting" 				jdbcType="INTEGER"  />
		<result property="rentalPrice" 				column="rentalPrice" 				jdbcType="INTEGER"  />
		<result property="account" 				column="ACCOUNT" 				jdbcType="VARCHAR"  />
		<result property="deposit" 				column="deposit" 				jdbcType="INTEGER"  />
		<result property="category" 				column="category" 				jdbcType="VARCHAR"  />
		<result property="returnAddress" 				column="returnAddress" 				jdbcType="VARCHAR"  />
		<result property="prodImg" 				column="prodImg" 				jdbcType="VARCHAR"  />
		<result property="recentImg" 				column="recentImg" 				jdbcType="VARCHAR"  />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addProduct"		parameterType="product" >
		INSERT 
	 	INTO product(width, LENGTH, height, userId, prodQuantity, prodName, prodDetail,
	 						 isRental, rentalCounting, rentalPrice, account, deposit, category, returnAddress, prodImg, recentImg)
	 	values (#{width}, #{LENGTH}, #{height}, #{height}, #{userId}, #{prodQuantity}, #{prodName}, #{prodDetail},
	 	 			#{isRental},#{rentalCounting},#{rentalPrice}, #{account}, #{deposit}, #{category}, #{returnAddress}, #{prodImg}, #{recentImg})
	 </insert>
	  
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getProduct"	parameterType="int"	resultMap="productSelectMap">
		SELECT * FROM product where prodNo =  #{prodNo}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateProduct"	parameterType="product" >
	   	update product
	   	<set>
	   		prodImg =#{prodImg}, 
	   		prodName =#{prodName}, 
	   		category =#{category}, 
	   		prodDetail =#{prodDetail},  
	   		returnAddress =#{returnAddress},  
	   		isRental =#{isRental}, 
	   		rentalPrice =#{rentalPrice}, 
	   		deposit =#{deposit},  
	   		ACCOUNT =#{account} 
	   	</set>
	   	where prodNo = #{prodNo}
	 </update>
	 
	  <!-- SQL : UPDATE -->
	 <update	id="updateProductCondition"	parameterType="product" >
	   	update product
	   	<set>
	   		prodCondition = #{prodCondition}
	   	</set>
	   	where prodNo = #{prodNo}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getProductList"  parameterType="search"	resultMap="productSelectMap">
	  	SELECT * FROM product
	  	
	  	<where>
	  		<!-- 검색어와 카테고리를 모두입력한 경우 -->
	  		<if test="searchKeyword != null and searchCategory != null">
					 prodName LIKE CONCAT('%',#{searchKeyword},'%') and category LIKE #{searchCategory}
	     	</if>
	  	
	  		<!-- 검색어만 입력한경우 -->
	  		<if test="searchKeyword != null and searchCategory == null">
					prodName LIKE CONCAT('%',#{searchKeyword},'%')
	  	    </if>
	  	
	  		<!-- 카테고리만 입력한경우 -->
	  		<if test="searchKeyword == null and searchCategory != null">
						category LIKE #{searchCategory}
	  		</if>
	  	</where>
	  	
	  	
	  	<if test="orderCondition != null">
	  		<if test='orderCondition == "rentalPriceASC"'>
			order by rentalPrice ASC
			</if>
			<if test='orderCondition == "rentalPriceDESC"'>
			order by rentalPrice DESC
			</if>
			
			<if test='orderCondition == "prodNoASC"'>
			order by prodNo ASC
			</if>			
			<if test='orderCondition == "prodNoDESC"'>
			order by prodNo DESC
			</if>
			
			<if test='orderCondition == "rentalCountingASC"'>
			order by rentalCounting ASC
			</if>			
			<if test='orderCondition == "rentalCountingDESC"'>
			order by rentalCounting DESC
			</if>
	  	
	  	</if>
	 
	 </select>

	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM product
	  	
	 </select>
	 
</mapper>