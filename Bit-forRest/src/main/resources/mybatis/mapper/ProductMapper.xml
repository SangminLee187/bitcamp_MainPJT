<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  <mapper namespace="ProductMapper"> 가 @Mapper 와 함께 밑의 한줄로 대체 됨-->
<mapper namespace="com.mvc.forrest.dao.product.ProductDAO"> 	
 	
	<resultMap id="productSelectMap" type="product">
		<result property="prodNo" 				column="prodNo" 				jdbcType="VARCHAR"/>
		<result property="width"	   			column="width" 				jdbcType="INTEGER" />
		<result property="length" 			column="LENGTH" 			jdbcType="INTEGER" />
		<result property="height" 			column="height" 		jdbcType="INTEGER" />
		<result property="userId" 				column="userId" 					jdbcType="VARCHAR" />
		<result property="prodCondition" 			column="prodCondition" 			jdbcType="VARCHAR" />
		<result property="prodQuantity" 				column="prodQuantity" 				jdbcType="INTEGER" />
		<result property="prodName" 			column="prodName" 				jdbcType="VARCHAR"  />
		<result property="prodDetail" 				column="prodDetail" 				jdbcType="VARCHAR"  />
		<result property="isRental" 				column="isRental" 				jdbcType="TINYINT"  />
		<result property="rentalCounting" 				column="rentalCounting" 				jdbcType="INTEGER"  />
		<result property="rentalPrice" 				column="rentalPrice" 				jdbcType="INTEGER"  />
		<result property="account" 				column="ACCOUNT" 				jdbcType="VARCHAR"  />
		<result property="category" 				column="category" 				jdbcType="VARCHAR"  />
		<result property="divyAddress" 				column="divyAddress" 				jdbcType="VARCHAR"  />
		<result property="prodImg" 				column="prodImg" 				jdbcType="VARCHAR"  />
		<result property="recentImg" 				column="recentImg" 				jdbcType="VARCHAR"  />
		<result property="wishlistNo" 			column="wishlistNo" 				jdbcType="INTEGER" />
		<result property="regDate" 			column= "regDate" 				jdbcType="TIMESTAMP" />
		<association property="userProd" javaType="User">
			<id property="userId" column="userId"  jdbcType="VARCHAR"/>
			<result property="userImg" column="userImg"  jdbcType="VARCHAR"/>
			<result property="userRate" column="userRate"  jdbcType="DOUBLE"/>
			<result property="nickname" 			column="nickname" 			jdbcType="VARCHAR" />
		</association>
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addProduct"		parameterType="product" >
		INSERT 
	 	INTO product(prodNo, width, LENGTH, height, userId, prodQuantity, prodName, prodDetail,
	 						 isRental, rentalCounting, rentalPrice, ACCOUNT, category, divyAddress, prodImg, recentImg, regDate)
	 	values (#{prodNo}, #{width}, #{length}, #{height}, #{userId}, #{prodQuantity}, #{prodName}, #{prodDetail},
	 	 			#{isRental},#{rentalCounting},#{rentalPrice}, #{account}, #{category}, #{divyAddress}, #{prodImg}, #{recentImg}, CURRENT_TIMESTAMP())
	 </insert>
	  
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getProduct"	parameterType="String"	resultMap="productSelectMap">
		SELECT *
	    FROM product p, user u
		where p.prodNo =  #{prodNo} and p.userId = u.userId
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateProduct"	parameterType="product" >
	   	update product
	   	<set>
	   		<if test="prodImg != null ">
	   		prodImg =#{prodImg}, 
	   		</if>
	   		category =#{category}, 
	   		prodDetail =#{prodDetail},  
	   		divyAddress =#{divyAddress},  
	   		isRental =#{isRental}, 
	   		rentalPrice =#{rentalPrice}, 
	   		ACCOUNT =#{account} 
	   	</set>
	   	where prodNo = #{prodNo}
	 </update>
	 
	  <!-- SQL : UPDATE -->
	 <update	id="updateProductCondition"	parameterType="product" >
	   	update product
	   	<set>
	   		prodCondition = #{prodCondition}
	   	</set>
	   	where prodNo = #{prodNo}
	 </update>
	 
	   <!-- SQL : UPDATE -->
	 <update	id="updateRecentImg"	parameterType="product" >
	   	update product
	   	<set>
	   		recentImg = #{recentImg}
	   	</set>
	   	where prodNo = #{prodNo}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<!-- 대여가능여부가 true이면서 물품상태가 보관중인 물품들의 리스트 -->
	<select  id="getProductList"  parameterType="search"	resultMap="productSelectMap">
	  	SELECT * FROM product
	  	
	  	<where>
	  		isRental = 1 and prodCondition = '보관중'
	  		
	  		<!-- 검색어와 카테고리를 모두입력한 경우 -->
	  		<if test="searchKeyword != null and searchCategory != null">
					and  prodName LIKE CONCAT('%',#{searchKeyword},'%') and category LIKE #{searchCategory}
	     	</if>
	  	
	  		<!-- 검색어만 입력한경우 -->
	  		<if test="searchKeyword != null and searchCategory == null">
					and prodName LIKE CONCAT('%',#{searchKeyword},'%')
	  	    </if>
	  	
	  		<!-- 카테고리만 입력한경우 -->
	  		<if test="searchKeyword == null and searchCategory != null">
					and 	category LIKE #{searchCategory}
	  		</if>
	  	</where>
	  	
	  <if test="orderCondition == null">
	  		order by regDate DESC LIMIT #{startRowNum}, #{pageSize}
	  	</if> 
	  	
	  	
	  	<if test="orderCondition != null">
	  		<if test='orderCondition == "rentalPriceASC"'>
			order by rentalPrice ASC LIMIT #{startRowNum}, #{pageSize}
			</if>
			<if test='orderCondition == "rentalPriceDESC"'>
			order by rentalPrice DESC LIMIT #{startRowNum}, #{pageSize}
			</if>
			
			<if test='orderCondition == "regDateASC"'>
			order by regDate ASC LIMIT #{startRowNum}, #{pageSize}
			</if>			
			<if test='orderCondition == "regDateDESC"'>
			order by regDate DESC LIMIT #{startRowNum}, #{pageSize}
			</if>
			
			<if test='orderCondition == "rentalCountingASC"'>
			order by rentalCounting ASC LIMIT #{startRowNum}, #{pageSize}
			</if>			
			<if test='orderCondition == "rentalCountingDESC"'>
			order by rentalCounting DESC LIMIT #{startRowNum}, #{pageSize}
			</if>
	  	
	  	</if>
	 
	 </select>
	 
	 	<!-- SQL : SELECT LIST -->
	<!-- 오토컴플릿을 위한 물품이름 리스트 -->
	<select  id="getProductNames" 	resultMap="productSelectMap">
	  	SELECT prodName FROM product
	  	
	  	<where>
	    		isRental = 1 and prodCondition = '보관중'
	    </where>
	 
	 </select>
	 
	 
	<select id="getProductListHasUser" parameterType="map" resultMap="productSelectMap">
      SELECT * 
      FROM product LEFT OUTER JOIN (SELECT * FROM wishlist WHERE wishedUserId=#{userId}) A ON product.prodNo = A.prodNo
      
	  	<where>
	  		isRental = 1 and prodCondition = '보관중'
	  		
	  		<!-- 검색어와 카테고리를 모두입력한 경우 -->
	  		<if test="search.searchKeyword != null and search.searchCategory != null">
					and  prodName LIKE CONCAT('%',#{search.searchKeyword},'%') and category LIKE #{search.searchCategory}
	     	</if>
	  	
	  		<!-- 검색어만 입력한경우 -->
	  		<if test="search.searchKeyword != null and search.searchCategory == null">
					and prodName LIKE CONCAT('%',#{search.searchKeyword},'%')
	  	    </if>
	  	
	  		<!-- 카테고리만 입력한경우 -->
	  		<if test="search.searchKeyword == null and search.searchCategory != null">
					and 	category LIKE #{search.searchCategory}
	  		</if>
	  	</where>
	  	
	  	<if test="search.orderCondition ==null">
	  	order by regDate DESC LIMIT #{search.startRowNum}, #{search.pageSize}
	  	</if>
	  	
	  	
	  	
	  	<if test="search.orderCondition != null">
	  		<if test='search.orderCondition == "rentalPriceASC"'>
			order by rentalPrice ASC LIMIT #{search.startRowNum}, #{search.pageSize}
			</if>
			<if test='search.orderCondition == "rentalPriceDESC"'>
			order by rentalPrice DESC LIMIT #{search.startRowNum}, #{search.pageSize}
			</if>
			
			<if test='search.orderCondition == "regDateASC"'>
			order by regDate ASC LIMIT #{search.startRowNum}, #{search.pageSize}
			</if>			
			<if test='search.orderCondition == "regDateDESC"'>
			order by regDate DESC LIMIT #{search.startRowNum}, #{search.pageSize}
			</if>
			
			<if test='orderCondition == "rentalCountingASC"'>
			order by rentalCounting ASC LIMIT #{search.startRowNum}, #{search.pageSize}
			</if>			
			<if test='orderCondition == "rentalCountingDESC"'>
			order by rentalCounting DESC LIMIT #{search.startRowNum}, #{search.pageSize}
			</if>
	  	
	  	</if>

   </select>
	 
	 <!-- SQL : SELECT LIST -->
	 <!-- 인덱스페이지에 프로덕트리스트를 최신순으로 4개 띄우는 쿼리 -->
	   <select    id="getProductListForIndex"   resultMap="productSelectMap">
       SELECT inner_table.* , inner_table.ROWNO
                    FROM(
                        SELECT product.*, transaction.paymentDate, ROW_NUMBER() OVER() AS ROWNO
                        FROM product left outer Join transaction on product.prodNo = transaction.prodNo
                        where transaction.tranCode = 0
                        order by transaction.paymentDate DESC )  inner_table
      WHERE inner_table.ROWNO &lt;= 4         
    </select>

	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM product
	  	
	  	<where>
	  		isRental = 1 and prodCondition = '보관중'
	  		<!-- 검색어와 카테고리를 모두입력한 경우 -->
	  		<if test="searchKeyword != null and searchCategory != null">
					 and prodName LIKE CONCAT('%',#{searchKeyword},'%') and category LIKE #{searchCategory}
	     	</if>
	  	
	  		<!-- 검색어만 입력한경우 -->
	  		<if test="searchKeyword != null and searchCategory == null">
					and prodName LIKE CONCAT('%',#{searchKeyword},'%')
	  	    </if>
	  	
	  		<!-- 카테고리만 입력한경우 -->
	  		<if test="searchKeyword == null and searchCategory != null">
					and	category LIKE #{searchCategory}
	  		</if>
	  	</where>
	  	
	 </select>
	 
</mapper>